# app.py - Final, Complete, and Corrected Version

import streamlit as st
from ultralytics import YOLO
import json
from PIL import Image
import io
from fpdf import FPDF
from datetime import datetime
import os
import base64
import numpy as np
from streamlit_webrtc import webrtc_streamer, VideoTransformerBase

# --- CONFIGURATION ---
MODEL_PATH = "runs/detect/train/weights/best.pt"
CARE_TIPS_PATH = "care_tips.json"

# --- HELPER FUNCTIONS ---

@st.cache_resource
def load_yolo_model(path):
    """Loads the YOLOv11 model from the specified path and caches it."""
    if not os.path.exists(path):
        st.error(f"FATAL: Model file not found at: {path}. The app cannot start.")
        st.stop()
    return YOLO(path)

@st.cache_data
def load_care_tips(path):
    """Loads care tips from the JSON file and caches them."""
    if not os.path.exists(path):
        st.error(f"FATAL: Care tips file not found at: {path}. The app cannot start.")
        st.stop()
    with open(path, 'r') as f:
        return json.load(f)

# --- REPORT GENERATION LOGIC ---

def generate_html_report(annotated_image, predictions, care_tips_db):
    """Generates an attractive, self-contained HTML report with an embedded image."""
    buffered = io.BytesIO()
    annotated_image.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode()
    
    html_content = f"""
    <html>
    <head>
        <title>Plant Disease Diagnosis Report</title>
        <style>
            body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 0; color: #333; background-color: #f4f4f9; }}
            .container {{ max-width: 800px; margin: 2em auto; background: white; padding: 30px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); border-radius: 10px; }}
            .report-header {{ text-align: center; margin-bottom: 2em; border-bottom: 2px solid #28a745; padding-bottom: 1em; }}
            h1 {{ color: #28a745; margin: 0; }}
            h2 {{ color: #333; border-bottom: 1px solid #eee; padding-bottom: 10px; margin-top: 1.5em;}}
            .image-section {{ text-align: center; margin-bottom: 2em; }}
            .image-section img {{ max-width: 450px; border-radius: 8px; border: 1px solid #ddd; }}
            .result-card {{ margin-bottom: 1.5em; padding: 1.5em; border-left: 5px solid #28a745; background-color: #fdfdfd; page-break-inside: avoid; }}
            .confidence {{ font-weight: bold; color: #007bff; }}
            ul {{ list-style-type: 'üåø'; padding-left: 20px; }}
            li {{ margin-bottom: 0.5em; }}
            .disclaimer {{ margin-top: 2em; padding: 1em; background-color: #fff3cd; border-left: 5px solid #ffc107; font-size: 0.9em; border-radius: 5px; }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="report-header">
                <h1>Plant Disease Diagnosis Report</h1>
                <p>Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            <div class="image-section">
                <h2>Analyzed Image</h2>
                <img src="data:image/png;base64,{img_str}" alt="Annotated Plant Image">
            </div>
    """

    if not predictions:
        html_content += "<h2>No Conditions Detected</h2><p>The model did not detect any specific diseases or healthy leaves in the image.</p>"
    else:
        grouped_preds = {p['name']: [] for p in predictions}
        for p in predictions: grouped_preds[p['name']].append(p['confidence'])
        for disease_name, confidences in grouped_preds.items():
            tips_data = care_tips_db.get(disease_name, {})
            html_content += f"""
            <div class="result-card">
                <h2>Detected Condition: {disease_name.replace('_', ' ').title()}</h2>
                <p><b>Instances Found:</b> {len(confidences)} | <b>Average Confidence:</b> <span class="confidence">{sum(confidences)/len(confidences):.2f}%</span></p>
                <h3>Suggested Action</h3>
                <p>{tips_data.get('suggestion', 'No suggestions available.')}</p>
                <h3>Recommended Care Tips</h3>
                <ul>{"".join(f"<li>{tip}</li>" for tip in tips_data.get('care_tips', []))}</ul>
            </div>
            """
            
    html_content += """
            <div class="disclaimer">
                <h2>Precautions & Disclaimer</h2>
                <ul>
                    <li>This report is generated by an automated AI model and serves as a preliminary guide.</li>
                    <li>For a definitive diagnosis, always consult with a qualified agricultural expert or botanist.</li>
                    <li>Model accuracy is dependent on the quality and diversity of its training data and input image clarity.</li>
                </ul>
            </div>
        </div>
    </body></html>
    """
    return html_content

class PDF(FPDF):
    def header(self):
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, 'Plant Disease Diagnosis Report', 0, 1, 'C')
        self.ln(5)
        self.set_draw_color(40, 167, 69)
        self.cell(0, 0, '', 'T', 1, 'C')
        self.ln(5)

    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')

import tempfile
import os

def generate_pdf_report(annotated_image, predictions, care_tips_db):
    """Generates a professional, well-structured PDF report with a clean layout."""
    pdf = PDF()
    pdf.add_page()

    pdf.set_font("Arial", 'B', 14)
    pdf.cell(0, 10, "Analyzed Image", 0, 1, 'L')

    # Save annotated image to a temporary PNG file
    img_w, img_h = annotated_image.size
    ratio = img_h / img_w
    display_w, display_h = (180, 180 * ratio) if ratio < 1 else (100 / ratio, 100)

    with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp_file:
        annotated_image.save(tmp_file, format="PNG")
        tmp_file_path = tmp_file.name

    pdf.image(tmp_file_path, x=pdf.w/2 - display_w/2, w=display_w, h=display_h)

    os.remove(tmp_file_path)

    pdf.ln(display_h + 5)
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(0, 10, "Diagnosis Summary", 0, 1, 'L')
    pdf.set_draw_color(220, 220, 220)
    pdf.cell(0, 0, '', 'T', 1, 'C')
    pdf.ln(5)

    if not predictions:
        pdf.set_font("Arial", '', 12)
        pdf.multi_cell(0, 10, "No specific conditions were detected by the model.")
    else:
        grouped_preds = {p['name']: [] for p in predictions}
        for p in predictions:
            grouped_preds[p['name']].append(p['confidence'])
        for disease_name, confidences in grouped_preds.items():
            tips_data = care_tips_db.get(disease_name, {})
            pdf.set_font("Arial", 'B', 13)
            pdf.set_text_color(40, 167, 69)
            pdf.cell(0, 8, f"Detected: {disease_name.replace('_', ' ').title()}", 0, 1)
            pdf.set_text_color(0, 0, 0)
            pdf.set_font("Arial", '', 11)
            pdf.multi_cell(0, 6, f"Instances Found: {len(confidences)} | Average Confidence: {sum(confidences)/len(confidences):.2f}%")
            pdf.set_font("Arial", 'B', 11)
            pdf.cell(0, 6, "Suggested Action:", ln=1)
            pdf.set_font("Arial", 'I', 11)
            pdf.multi_cell(0, 6, f"  {tips_data.get('suggestion', 'N/A')}")
            pdf.set_font("Arial", 'B', 11)
            pdf.cell(0, 6, "Recommended Care Tips:", ln=1)
            pdf.set_font("Arial", '', 11)
            for tip in tips_data.get('care_tips', []):
                pdf.multi_cell(0, 6, f"  - {tip}")
            pdf.ln(8)

    if pdf.get_y() > 220:
        pdf.add_page()
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(0, 10, "Precautions & Disclaimer", 0, 1, 'L')
    pdf.set_draw_color(220, 220, 220)
    pdf.cell(0, 0, '', 'T', 1, 'C')
    pdf.ln(5)
    pdf.set_font("Arial", '', 10)
    precautions = [
        "This report is generated by an automated AI model and should be used as a preliminary guide only.",
        "For a definitive diagnosis and treatment plan, please consult a qualified agricultural expert or botanist.",
        "Model accuracy is highly dependent on the quality of the input image. Use clear, well-lit photos for best results."
    ]
    for precaution in precautions:
        pdf.multi_cell(0, 6, f"- {precaution}")

    return pdf.output(dest='S')

# --- WEBCAM DETECTION CLASS ---
class VideoTransformer(VideoTransformerBase):
    def __init__(self, model):
        self.model = model

    def transform(self, frame):
        img = frame.to_ndarray(format="bgr24")
        results = self.model(img, stream=True)
        for r in results:
            img = r.plot()
        return img

# --- STREAMLIT APP INTERFACE ---

def main():
    st.set_page_config(page_title="Plant Disease Detector", layout="wide", initial_sidebar_state="expanded")

    model = load_yolo_model(MODEL_PATH)
    care_tips = load_care_tips(CARE_TIPS_PATH)

    st.sidebar.title("About this App")
    st.sidebar.info(
        "This application uses a custom-trained YOLOv11 model to detect diseases in plants. "
        "It demonstrates an end-to-end framework for rapid prototyping of AI-driven agricultural solutions."
    )
    st.sidebar.header("How to Use")
    st.sidebar.markdown("""
    1.  Select a detection mode: **Image Upload** or **Live Webcam**.
    2.  Follow the on-screen instructions.
    3.  View the diagnosis and download reports.
    """)
    st.sidebar.markdown("---")
    st.sidebar.write("Developed by **K Advaith** and **Shresth Agarwal**.")

    st.title("üåø Plant Disease Diagnosis Framework")
    st.write("Choose a mode below: upload an image for a detailed report, or use your webcam for live detection.")

    tab1, tab2 = st.tabs(["üìÅ Image Upload & Report", "üìπ Live Webcam Detection"])

    # --- Image Upload Tab ---
    with tab1:
        st.header("Upload an Image for a Full Diagnosis Report")
        uploaded_file = st.file_uploader("Choose an image (jpg, jpeg, png)...", type=["jpg", "jpeg", "png"], key="uploader")

        if uploaded_file is not None:
            image = Image.open(uploaded_file)
            
            col1, col2 = st.columns([0.6, 0.4])
            with col1:
                st.subheader("Uploaded Image")
                st.image(image, use_column_width=True)

            if st.button('Diagnose Plant', use_container_width=True, key='diagnose_btn'):
                with st.spinner('Running diagnosis...'):
                    results = model(image)
                    predictions_list = []
                    annotated_image = image
                    
                    for result in results:
                        annotated_image = Image.fromarray(result.plot()[..., ::-1])
                        if result.boxes:
                            for box in result.boxes:
                                predictions_list.append({
                                    'name': model.names[int(box.cls)],
                                    'confidence': float(box.conf) * 100
                                })
                    
                    with col2:
                        st.subheader("Diagnosis Results")
                        if not predictions_list:
                            st.warning("No specific conditions were detected.")
                        else:
                            st.image(annotated_image, caption='Annotated Image', use_column_width=True)
                            st.markdown("---")
                            st.subheader("Download Full Report")

                            html_report = generate_html_report(annotated_image, predictions_list, care_tips)
                            pdf_report_bytes = generate_pdf_report(annotated_image, predictions_list, care_tips).encode('latin1')

                            c1, c2 = st.columns(2)
                            with c1:
                                st.download_button("‚¨áÔ∏è Download HTML Report", html_report, f"report_{os.path.splitext(uploaded_file.name)[0]}.html", 'text/html', use_container_width=True)
                            with c2:
                                st.download_button("‚¨áÔ∏è Download PDF Report", bytes(pdf_report_bytes), f"report_{os.path.splitext(uploaded_file.name)[0]}.pdf", 'application/pdf', use_container_width=True)

    # --- Webcam Detection Tab ---
    with tab2:
        st.header("Live Detection via Webcam")
        st.info("Allow camera access and point it at a plant. The model will draw bounding boxes in real-time.")
        
        webrtc_streamer(
            key="webcam-detection",
            video_processor_factory=lambda: VideoTransformer(model),
            media_stream_constraints={"video": True, "audio": False},
            async_processing=True,
        )

if __name__ == "__main__":

    main()
